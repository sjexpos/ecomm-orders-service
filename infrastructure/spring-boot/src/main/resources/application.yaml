
server:
  port: 6063
  tomcat:
    max-connections: 2000 # Maximum connections
    accept-count: 200     # Maximum waiting number
  servlet:
    context-path: /
  error:
    include-stacktrace: never
    include-message: always
    include-exception: true
    include-binding-errors: always

spring:
  boot:
    admin:
      client:
        # Cloud Native Spring Admin Server is running
        url: http://localhost:9090
  threads:
    virtual:
      enabled: true
  application:
    name: orders-srv
  cache:
    type: redis
    redis:
      cache-null-values: true
      use-key-prefix: true
      key-prefix: ECOMM-ORDERS-MS
      time-to-live: 5000
  data:
    redis:
      host: localhost
      port: 6379
      ssl: 
        enabled: false
      timeout: 1000
  cloud:
    discovery:
      enabled: false
  datasource:
    host: localhost
    port: 5432
    schemaName: ecomm_orders
    url: jdbc:postgresql://${spring.datasource.host}:${spring.datasource.port}/${spring.datasource.schemaName}?serverTimezone=UTC
    driver-class-name: org.postgresql.Driver
    username: orders_service
    password: 1234
  jpa:
    open-in-view: false
    show-sql: false
    generate-ddl: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        cache:
          use_second_level_cache: true
          use_query_cache: true
          factory_class: org.redisson.hibernate.RedissonRegionFactory
          redisson:
            fallback: true
            config: redisson-dev.yaml
        search:
          schema_management:
            strategy: create-or-validate
          automatic_indexing:
            enable_dirty_check: true
          indexing:
            listeners:
              enabled: true
            plan:
              synchronization:
                strategy: write-sync
          query:
            loading:
              fetch_size: 30
              cache_lookup:
                strategy: persistence-context-then-second-level-cache
          mapping:
            process_annotations: false
            configurer: bean:searchMappingConfigurer
          backend:
            type: elasticsearch
            hosts: localhost:9200
            protocol: http
#          backend:  # uncomment this to connect to AWS OpenSearch from local
#            type: elasticsearch
#            hosts: <opensearch endpoint>:443
#            protocol: https
#            aws:
#              signing:
#                enabled: true
#              region: us-east-1
#              credentials:
#                type: static
#                access_key_id: <value>
#                secret_access_key: <value>

management:
  server:
    port: ${server.port}
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
      show-components: always
  info:
    git:
      mode: full
  health:
    elasticsearch:
      enabled: false # if we need health check, we need to create a health indicator which will use the connection form hibernate search
    ratelimiters:
      enabled: true
    circuitbreakers:
      enabled: true
  tracing:
    enabled: true
    sampling:
      probability: 1.0

springdoc:
  show-actuator: false
  show-login-endpoint: false
  api-docs:
    path: /api
  swagger-ui:
    path: /
    operationsSorter: method
    disable-swagger-default-url: true

resilience4j:
  retry:
    instances:
      remote-insert-stock-transactions:
        # Maximum number of attempts (including the initial call as the first attempt)
        max-attempts: 3
        # Fixed wait duration between retry attempts
        wait-duration: 1s
        retry-exceptions:
          - org.springframework.web.client.HttpServerErrorException
        ignore-exceptions:
          - io.oigres.ecomm.service.products.model.exception.NotFoundException
          - io.oigres.ecomm.service.products.model.exception.NoStockException
          - io.oigres.ecomm.service.products.model.exception.StockTimeOutException
        # throwing of MaxRetriesExceededException when the Retry has reached the configured maxAttempts
        fail-after-max-retries: true
      remote-200-expected:
        # Maximum number of attempts (including the initial call as the first attempt)
        max-attempts: 3
        # Fixed wait duration between retry attempts
        wait-duration: 1s
        fail-after-max-retries: true
  circuitbreaker:
    instances:
      remote-gets:
        sliding-window-type: COUNT_BASED
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        register-health-indicator: true

logging:
  pattern:
    console: '%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%-5p) [${spring.application.name}] [%clr(%15.15t){faint}] [%clr(%32X{traceId}-%16X{spanId}){blue}] %clr(%40.40logger{5.10}:%-4L){cyan} : %m %n'
  level:
    io.oigres.ecomm.service.products: INFO
#    org.hibernate.SQL: DEBUG
#    org.hibernate.internal: TRACE
#    org.springframework.orm.jpa: DEBUG
#    org.springframework.transaction: DEBUG
#    org.springframework.transaction.interceptor: TRACE
#    org.springframework.jdbc: DEBUG

ecomm:
  termsOfService: https://ecomm.oigres.io/terms/
  license: https://ecomm.oigres.io/license/
  service:
    orders:
      name: EComm
      version: ${project.version}
    products:
      baseUri: http://localhost:6062
    users:
      baseUri: http://localhost:6061
    tracing:
      url: http://localhost:4318/v1/traces


